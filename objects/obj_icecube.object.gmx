<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_icecube</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
scr_move_init();

// Speed variation beyond which the ice breaks.
// Should not be greater than the max_speed.
max_jitter = 12;

// No frozen content by default.
frozen_object = 0;
frozen_image = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Melt
if (frozen_object) {
  instance_activate_object(frozen_object);  
  // TODO compute proper positionning.
  frozen_object.xs = xs
  frozen_object.x = x
  frozen_object.ys = ys
  frozen_object.y = y
}
if (frozen_image) {
  // Destroy the ice cube and the image.
  with(frozen_image) instance_destroy();
}
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Apply usual movement and collision.
scr_move();

if (abs(delta_ys) &gt; 0) {
  with(instance_place(x, y + 2, obj_mage)) do_die = 1;
  with(instance_place(x, y + 2, obj_orc)) do_die = 1;
}

var jitter = delta_xs * delta_xs + delta_ys * delta_ys
if (jitter &gt;= max_jitter * max_jitter) {
  if (frozen_object) { with(frozen_object) instance_destroy(); }
  if (frozen_image) { with(frozen_image) instance_destroy(); }
  
  // Use instance create to avoid the explosion to be considered obj_solid.
  instance_create(x, y, obj_explode); 
  instance_destroy();
  exit;  
}

// Move the frozen object along with the ice cube.
if (frozen_image) {
  frozen_image.x = x;
  frozen_image.y = y;
}

// Stop an ongoing push.
// Todo: use a separate variable for push
xs = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

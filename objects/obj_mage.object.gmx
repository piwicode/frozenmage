<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_mage_48</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_move_init()
// Horizontal speed when walking.
walk_speed = 3;
// Vertical speed set when jumping.
jump_speed = 7;

aim_arrow = instance_create(x, y, obj_aim_arrow)
aim_arrow.visible = false

const_image_speed_walk = 10 / room_speed // 8 per seconds
image_speed = 0 // No animation by default.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

scr_accelerate();


// If jump key has just been pressed and there is something solid just below
// the object, then jump.

is_standing = place_meeting(x, y + 1, obj_solid)

// The mage walks horizontaly except when aiming.
if(fire_pressed) {
  if(is_standing) { // When aiming and on the ground stop moving.
    // Apply friction.
    xs = Approach(xs, 0., const_aim_x_friction) ; 
  } // When aiming and in the air keep moving until reaching the ground.
} else { // When not aiming, horizontal speed is controled by keyboard.
  xs = x_ctrl * walk_speed; 
}

if (jump_ctrl &amp;&amp; is_standing) {
  ys = -jump_speed;
}


// Fly
if(keyboard_check(vk_shift)) {
  ys -= 1;
}

// Detect collisions with walls
scr_move();

// Horizontal flip the sprite according to the command.
if (x_ctrl != 0) {
  image_xscale = x_ctrl;
}

// Play the walk animation only when the mage is moving horizontally.
image_speed = const_image_speed_walk * (xs != 0);



// -y_ctrl because vertical axis is inverted between atan and the screen.
// use image_scale to remember the current facing position. 
if (x_ctrl == 0 &amp;&amp; y_ctrl == 0) {
  var aim_direction = radtodeg(arctan2(-y_ctrl, image_xscale));
} else {
  var aim_direction = radtodeg(arctan2(-y_ctrl, x_ctrl));
}
aim_arrow.visible = fire_pressed;
aim_arrow.x = x 
aim_arrow.y = y
aim_arrow.image_angle = aim_direction;

// Use fire_pressed_start to change the aim style.
if (fire_pressed_start) {  
  spark = instance_create(x, y, obj_spark);
  with (spark) {
    direction = aim_direction;
    speed = max_speed;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get user inputs.
jump_ctrl = keyboard_check_pressed(vk_space);
fire_pressed_start = keyboard_check_pressed(vk_control);
fire_pressed = keyboard_check(vk_control);
fire_released = keyboard_check_released(vk_control);
x_ctrl = keyboard_check(vk_right) - keyboard_check(vk_left);
y_ctrl = keyboard_check(vk_down) - keyboard_check(vk_up);

if(fire_pressed_start) fire_frame_count = 0;
if(fire_pressed) fire_frame_count += 1;
if(fire_released) show_debug_message("fire duration " + string(fire_frame_count))

var x_push = 0;
if(fire_pressed == 0) {
  // The mage walks horizontaly except when aiming
  x_push = x_ctrl * walk_speed;
}

// Push a block when the mage is in contact with it.
if x_push != 0 &amp;&amp; place_meeting(x + sign(x_push), y, obj_icecube) { 
  var block = instance_place(x + sign(x_push), y, obj_icecube);
  block.xs = x_push;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collidable">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Kill the mage
instance_create(x, y, obj_explode);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_icecube">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_col_icecube_crush()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

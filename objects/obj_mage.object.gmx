<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_mage</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Speeds over x and y.
xs = 0;
ys = 0;
// Accelerations
yss = 1; // Gravity is a vertical acceleration toward the bottom.
// Maximum absolute value of the speed on both axis.
max_speed = 30;
walk_speed = 10;
jump_speed = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get user inputs
x_ctrl = keyboard_check(vk_right) - keyboard_check(vk_left);
jump_ctrl = keyboard_check_pressed(vk_space);

// Apply the acceleration to the current speed, up to some a maximum speed.
ys = clamp(ys + yss, -max_speed, max_speed);
xs = x_ctrl * walk_speed;

// If jump has just been pressed and there is something solid just below
// the object.
if jump_ctrl &amp;&amp; place_meeting(x, y + 1, obj_stone) {
  ys = -jump_speed;
}

// Detect collisions
if place_meeting(x + xs, y, obj_stone) {
  while(!place_meeting(x + sign(xs), y, obj_stone)) x += sign(xs);
  xs = 0
}

if place_meeting(x, y + ys, obj_stone) {
  while(!place_meeting(x , y + sign(ys), obj_stone)) y += sign(ys);
  ys = 0
}
// Apply speed corrected by collision to the sprite.
x += xs
y += ys

if x_ctrl != 0 {
  image_xscale = x_ctrl
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

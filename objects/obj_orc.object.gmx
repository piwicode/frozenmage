<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_orc</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_dangerous</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Call parent event and override default values.
event_inherited();
is_freezable = 1;

// Speeds over x and y.
xs = 0;
ys = 0;
// Acceleration: gravity is a vertical acceleration toward the bottom.
yss = 1;
// Maximum absolute value of the speed on both axis.
max_speed = 30;
// Horizontal speed when walking.
walk_speed = 1;
// Current direction the ennemy is heading
x_ctrl = 1;
jump_ctrl = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Apply the acceleration to the current speed, up to some a maximum speed.
ys = clamp(ys + yss, -max_speed, max_speed);
xs = x_ctrl * walk_speed;

// If jump has just been pressed and there is something solid just below
// the object.
if jump_ctrl &amp;&amp; place_meeting(x, y + 1, obj_solid) {
  ys = -jump_speed;
}

// Detect collisions
if place_meeting(x + xs, y, obj_solid) {
  while(!place_meeting(x + sign(xs), y, obj_solid)) x += sign(xs);
  xs = 0;
  x_ctrl *= -1; // Go the other direction
} else {
  // Detect absence of a platform at the feet of the sprite.
  // Check at the 1/4 or 3/4 of the sprite horizontaly, and one pixel below
  // the bounding box which corresponds to the maximum resolution of the
  // collision detection.
  if(!position_meeting((bbox_left * (2 - sign(xs)) + bbox_right * (2 + sign(xs))) / 4,
                       bbox_bottom + 1,
                       obj_solid)) {
      x_ctrl *= -1; // Go the other direction
  }
  
}

if place_meeting(x, y + ys, obj_solid) {
  while(!place_meeting(x , y + sign(ys), obj_solid)) y += sign(ys);
  ys = 0;
}

// Apply speed corrected by collision to the sprite.
x += xs
y += ys

if x_ctrl != 0 {
  image_xscale = x_ctrl
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_icecube">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_col_icecube_crush()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_dangerous">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
instance_create(x, y, obj_explode);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

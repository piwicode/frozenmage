<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_orc2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>500</depth>
  <persistent>0</persistent>
  <parentName>obj_dangerous</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Call parent event and override default values.
event_inherited();
is_freezable = 1;

// Initialize the moveable capability.
scr_move_init();

// Current direction the ennemy is heading
x_ctrl = 1;
walk_speed = 1;
do_die = 0;

// Animation
image_speed = .2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Detect obstacle in front of the sprite or absence of a platform at the feet of the sprite.
if (place_meeting(x + x_ctrl, y, obj_entity) &amp;&amp;
    !place_meeting(x - x_ctrl, y, obj_entity)) {
  // There is something solid in front of the character, and nothing solid in the back.
  x_ctrl *= -1;
} else if (
  !position_meeting(((bbox_left * (2 - x_ctrl)) + bbox_right * (2 + x_ctrl)) / 4, bbox_bottom + 1, obj_entity) &amp;&amp;
  position_meeting(((bbox_left * (2 + x_ctrl)) + bbox_right * (2 - x_ctrl)) / 4, bbox_bottom + 1, obj_entity) &amp;&amp; 
  !place_meeting(x - x_ctrl, y, obj_solid)) {
    // There is nothing to walk on in front of the character,
    // something to walk on behind the character,
    // and nothing in the back preventing movement.
    x_ctrl *= -1; // Go the other direction.
}

xs = x_ctrl * walk_speed;

scr_move()

// Face the displacement direction.
if x_ctrl != 0 {
  image_xscale = abs(image_xscale) * x_ctrl
}

if (do_die) {
  instance_create(x, y, obj_explode);
  instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

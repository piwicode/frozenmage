<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_door</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>obj_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// External control variables
do_open = 0;  // Is there an oppening plate being triggered.
do_close = 0;  // Is there an oppening plate being triggered.

// Label establishing the relationship between the door and the plates.
label = 0;

// Tunning variables
is_freezable = 0
triggered_openning_duration = room_speed * 1
stay_openned_duration = room_speed * 4
auto_closing_duration = room_speed * 10
triggered_closing_duration = room_speed * .25

image_angle = (image_angle + 360) % 360;
is_horizontal = (image_angle == 90 || image_angle == 270);
movment_sign = IIF(image_angle == 0 || image_angle == 90, 1 , -1);

p_amplitude = 48;  // Amplitude of the movement.
p_closed = IIF(is_horizontal, x, y);  // param value when closed.
p_opened = p_closed - p_amplitude * movment_sign;  // param value when closed.

// Object state variables
current_sound = 0;
p = p_closed; // Current position of the door, always integer.
pp = p; // Target position of the door, floading point.
remaining_open_time = 0;
enum door_state {
   closed = 1,
   triggered_openning = 2,
   opened = 3,
   auto_closing = 4,
   triggered_closing = 5
}
   
state = door_state.closed

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Process plate inputs.
previous_state = state
if (do_close &amp;&amp; !do_open &amp;&amp; state != door_state.closed) {
  state = door_state.triggered_closing;
}

if (do_open &amp;&amp; state != door_state.opened) {
  state = door_state.triggered_openning;
}
if (do_open) {
  remaining_open_time = stay_openned_duration;
}

// Compute the target position.
switch(state) {
  case door_state.triggered_openning:
    pp = Approach(pp, p_opened, p_amplitude / triggered_openning_duration);    
  case door_state.opened:
    remaining_open_time = max(0, remaining_open_time - 1);
    if(!remaining_open_time) {
      state = door_state.auto_closing;
    }
    break;
  case door_state.auto_closing:
    pp = Approach(pp, p_closed, p_amplitude / auto_closing_duration)
  break;  
  case door_state.triggered_closing:
    pp = Approach(pp, p_closed, p_amplitude / triggered_closing_duration)    
  break;  
}

// Move the door avoidint collisions with a solid object.
var ps = pp - p;
repeat(abs(ps)) {
 if(scr_door_place_meeting(p + sign(ps), obj_entity)) {
   // Kills what it falls on.
   with(scr_door_instance_place(p + sign(ps), obj_orc)) { do_die = 1; }
   with(scr_door_instance_place(p + sign(ps), obj_mage)) { do_die = 1;  }
   pp = p; // Stop the door in place.

   break;
 }
 p += sign(ps)
}

// Update the object position in game.
if (is_horizontal) { x = p; } else { y = p; }

// Update the state.
if (pp == p_closed &amp;&amp; state != door_state.closed) {
  state = door_state.closed;

}
if (pp == p_opened &amp;&amp; state == door_state.triggered_openning) {
  state = door_state.opened;
}

// Sound
if(state != previous_state) {
  audio_stop_sound(current_sound);
  switch(state) {
    case door_state.triggered_openning:
    case door_state.triggered_closing:
    case door_state.auto_closing:
      audio_sound_gain(current_sound, 0, .2);      
      current_sound = scr_play_at_position(snd_door_sliding);
    break;
    case door_state.closed:
      audio_sound_gain(current_sound, 0, .2);      
      current_sound = scr_play_at_position(snd_door_stop); 
    break;  
  }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>do_open = 0;
do_close = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

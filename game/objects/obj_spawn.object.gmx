<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spawn</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Previous position of the view stored to detect when the scrolling is done.
prev_x = view_xview[0]; prev_y = view_yview[0];

// Speed of the view when scrolling to show the respawn location.
scrolling_initial_speed = .5;
scrolling_speed = 0;
scrolling_accleration = .4;

// Time before recreating the character.
respawn_delay = room_speed * .5;

// State holding the current of this object.
state = spawn_state.idle;

enum spawn_state {
 idle,
 do_respawn,
 scrolling,
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state) {
case spawn_state.idle:
break;

case spawn_state.do_respawn:
  // Store the viewport scrolling parameters.
  prev_hspeed = view_hspeed[0]; 
  prev_vspeed = view_vspeed[0]; 
  // Set a smooth slow scrolling.
  scrolling_speed = scrolling_initial_speed;
  view_hspeed[0] = scrolling_speed;
  view_vspeed[0] = scrolling_speed;
  // Request to focuss on the respawn object.
  view_object[0] = self.id
  // Wait for the scolling to terminate.
  state = spawn_state.scrolling;
  static_view_count = 0;
  // Play respawn sound.
  audio_play_sound(snd_respawn, 20/*priority*/, false);
break;

case spawn_state.scrolling:
  if (prev_y == view_yview[0] &amp;&amp; prev_x == view_xview[0]) {
    static_view_count++; // The view no longer moves.
  } else {
    static_view_count = 0;
  }
  scrolling_speed += scrolling_accleration;
  view_hspeed[0] = scrolling_speed;
  view_vspeed[0] = scrolling_speed;
  
  if (static_view_count &gt; respawn_delay ) {
    view_hspeed[0] = prev_hspeed; 
    view_vspeed[0] = prev_vspeed;
    state = spawn_state.idle;
    with(instance_create(x, y, obj_mage)) {
      view_object[0] = id;
      scr_emit_magic_burst(4, 4);
    }
  }
break;
}

prev_y = view_yview[0]
prev_x = view_xview[0]
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

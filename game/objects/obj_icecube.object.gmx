<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_icecube</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
scr_move_init();

// Speed variation beyond which the ice breaks.
// Should not be greater than the max_speed.
max_jitter = 8;

// No frozen content by default.
frozen_object = 0;
frozen_image = 0;

do_die = 0; // When 1, the object self destruct on next cycle.

time_before_falling = room_speed * 1
// When the cube stands still until something walks on top of it.
state = block_state.free;

enum block_state {
  still, // static until something stands on top of it.  
  about_to_fall, // static until alarm 1 rings.
  free, // free to fall and to be pushed.
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Melt
if (frozen_object) {
  instance_activate_object(frozen_object);  
  // TODO compute proper positionning.
  frozen_object.xs = xs;
  frozen_object.x = x;
  frozen_object.xx = xx;
  frozen_object.ys = ys;
  frozen_object.y = y;
  frozen_object.yy = yy;
}
if (frozen_image) {
  // Destroy the ice cube and the image.
  with(frozen_image) instance_destroy();
}
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Apply usual movement and collision.
if (do_die) {
  if (frozen_object) { with(frozen_object) instance_destroy(); }
  if (frozen_image) { with(frozen_image) instance_destroy(); }
  
  // Use instance create to avoid the explosion to be considered obj_solid.
  instance_create(x, y, obj_explode); 
  instance_destroy();
  exit;  
}
switch (state) {
case block_state.still:
  // The block do not move.
  xx = x; yy = y;  xst = 0; yst = 0; xs = 0; ys = 0;
  if (place_meeting(x, y - 2, obj_entity)) { // Something is on top.
    block = instance_place(x, y - 2, obj_icecube);
    if (block &amp;&amp; block.state == block_state.still) {
      // Do nothing
    } else if(block &amp;&amp; block.state == block_state.free) {
      // Free immediately when colliding with a block.
      state = block_state.free; 
    } else {
      // Something is walking on the block.
      state = block_state.about_to_fall;
    }
  }   
  exit;

case block_state.about_to_fall:
  // The block do not move.
  xx = x; yy = y;  xst = 0; yst = 0; xs = 0; ys = 0;
  time_before_falling = max(0, time_before_falling -1);
  if(time_before_falling == 0) {state = block_state.free;}
  exit;

case block_state.free:  
  scr_move();

  // Kill characters if is falling upon.
  if (abs(delta_ys) &gt; 1) {
    with(instance_place(x, y + 2, obj_mage)){ do_die = 1; }
    with(instance_place(x, y + 2, obj_orc)){ do_die = 1; }
  }

  // Detect a shock that could break the block.  
  var jitter = delta_xs * delta_xs + delta_ys * delta_ys
  if (jitter &gt;= max_jitter * max_jitter) {
    do_die = 1; // Die on the next frame to let a full cycle of objects to detect contact.
  }
  
  // Detect a shock that could be heard.
  if(abs(delta_ys) &gt; 2) { 
    var intensity = clamp(delta_ys, 2, 8) / 10;
    var max_dist = 150;
    var distance = (max_dist - clamp(scr_distance_of_view(), 0, max_dist)) / max_dist;
    scr_sound_play_shock(intensity * distance);
  }

  // Move the frozen object along with the ice cube.
  if (frozen_image) {
    frozen_image.x = x;
    frozen_image.y = y;
  }
  
  // Stop an ongoing push.
  xs = 0;
  exit;
}
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
